{"version":3,"sources":["components/Navbar/Navbar.js","components/Array/Array.js","Algorythms.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","handleArrayReset","handleSizeChange","handleAnimationSpeedChange","handleAlgorythmChange","handleStart","stopVisualization","visualizationRunning","arraySize","animationSpeed","useState","settingsActive","setSettingsActive","infoActive","setInfoActive","settingsClass","infoClass","buttonClass","buttonText","className","data-tip","data-for","data-place","data-effect","onClick","id","disabled","onChange","e","target","value","map","el","idx","key","styles","active","backgroundColor","axis","xstep","xmin","xmax","x","Array","state","barWidth","this","calculateBarWidth","prevProps","prevState","array","length","props","size","containerWidth","document","getElementsByClassName","clientWidth","Math","floor","setState","trace","step","arrayChart","arrays","val","barStyles","comparisons","includes","swaps","sorted","style","height","width","React","Component","setTrace","comparison","swap","push","slice","undefined","i","j","temp","quickSortAlgorythm","quickSort","low","high","pi","pivot","partition","mergeSort","splitArray","startIdx","endIdx","middleIdx","left","right","k","merge","bubbleSort","arr","n","swapped","insertionSort","comparedValue","App","algorythm","animationId","currentComparison","currentSwap","generateNewArray","handleArrayChange","newTrace","startVisualization","nextStep","time","setInterval","clearInterval","min","max","ceil","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c92bb22.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Navbar.scss\";\nimport { FaQuestion, FaCog, FaRedo } from \"react-icons/fa\";\nimport ReactTooltip from \"react-tooltip\";\nimport Slider from \"react-input-slider\";\n\nfunction Navbar({\n  handleArrayReset,\n  handleSizeChange,\n  handleAnimationSpeedChange,\n  handleAlgorythmChange,\n  handleStart,\n  stopVisualization,\n  visualizationRunning,\n  arraySize,\n  animationSpeed,\n}) {\n  const [settingsActive, setSettingsActive] = useState(false);\n  const [infoActive, setInfoActive] = useState(false);\n  const settingsClass = settingsActive ? \"active\" : \"\";\n  const infoClass = infoActive ? \"active\" : \"\";\n\n  const algorythms = [\"Merge sort\", \"Bubble sort\", \"Quick sort\", \"Insertion sort\"];\n  const buttonClass = visualizationRunning ? \"disabled\" : \"\";\n  const buttonText = visualizationRunning ? \"STOP\" : \"START\";\n\n  const handleSettingsClick = () => {\n    if (!visualizationRunning) {\n      setSettingsActive(!settingsActive);\n    }\n  };\n\n  const handleInfoClick = () => {\n    if (!visualizationRunning) {\n      setInfoActive(!infoActive);\n    }\n  };\n\n  const handleStartClick = () => {\n    if (settingsActive) setSettingsActive(false);\n    if (infoActive) setInfoActive(false);\n    handleStart();\n  };\n\n  return (\n    <nav>\n      <div className=\"info-container\">\n        <span\n          data-tip=\"How to use?\"\n          data-for=\"help-tooltip\"\n          data-place=\"right\"\n          data-effect=\"solid\"\n          className={\"fab help-icon \" + buttonClass}\n          onClick={handleInfoClick}\n        >\n          <FaQuestion className=\"icon\" />\n        </span>\n        {!visualizationRunning && <ReactTooltip id=\"help-tooltip\" />}\n\n        <div className={\"info \" + infoClass}>\n          <p>Choose desired sorting algorythm and press start to see the visualization.</p>\n          <p>\n            You can adjust array size and sorting speed by clicking on a settings icon in upper\n            right corner.\n          </p>\n        </div>\n      </div>\n\n      <section className=\"controls\">\n        <div className=\"choose-algorythm-container\">\n          <select\n            disabled={visualizationRunning}\n            className={\"choose-algorythm \" + buttonClass}\n            onChange={(e) => handleAlgorythmChange(e.target.value)}\n          >\n            {algorythms.map((el, idx) => {\n              return (\n                <option value={idx} key={idx}>\n                  {el}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n\n        <button\n          className=\"start\"\n          onClick={visualizationRunning ? () => stopVisualization() : () => handleStartClick()}\n        >\n          {buttonText}\n        </button>\n        <FaRedo\n          data-tip=\"Reset array\"\n          data-for=\"reset-tooltip\"\n          data-place=\"right\"\n          data-effect=\"solid\"\n          className=\"reset-icon\"\n          onClick={handleArrayReset}\n        />\n        <ReactTooltip id=\"reset-tooltip\" />\n      </section>\n\n      <div className=\"settings-container\">\n        <span\n          data-tip=\"Settings\"\n          data-for=\"settings-tooltip\"\n          data-place=\"left\"\n          data-effect=\"solid\"\n          className={\"fab settings-icon \" + buttonClass}\n          onClick={handleSettingsClick}\n        >\n          <FaCog className=\"icon\" />\n        </span>\n        {!visualizationRunning && <ReactTooltip id=\"settings-tooltip\" />}\n\n        <div className={\"settings \" + settingsClass}>\n          <p>Array size: {arraySize}</p>\n          <Slider\n            styles={{\n              active: {\n                backgroundColor: \"#a8dadc\",\n              },\n            }}\n            axis=\"x\"\n            xstep={1}\n            xmin={10}\n            xmax={200}\n            x={arraySize}\n            onChange={({ x }) => handleSizeChange(x)}\n          />\n          <p>Animation speed: {animationSpeed}</p>\n          <Slider\n            styles={{\n              active: {\n                backgroundColor: \"#a8dadc\",\n              },\n            }}\n            axis=\"x\"\n            xstep={1}\n            xmin={1}\n            xmax={25}\n            x={animationSpeed}\n            onChange={({ x }) => handleAnimationSpeedChange(x)}\n          />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./array.scss\";\n\nclass Array extends React.Component {\n  state = {\n    barWidth: 0,\n  };\n\n  componentDidMount() {\n    this.calculateBarWidth();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.array.length !== this.props.array.length) {\n      this.calculateBarWidth();\n    }\n  }\n\n  calculateBarWidth() {\n    const { array } = this.props;\n\n    let size = array.length;\n    let containerWidth = document.getElementsByClassName(\"array-container\")[0].clientWidth;\n    let barWidth = Math.floor((containerWidth - size) / size);\n\n    this.setState({ barWidth });\n  }\n\n  render() {\n    const { array, trace, step } = this.props;\n    const { barWidth } = this.state;\n\n    const arrayChart =\n      trace.arrays.length > 0\n        ? trace.arrays[step].map((val, idx) => {\n            let barStyles = \"bar\";\n            if (trace.comparisons[step].includes(idx)) barStyles += \" compared\";\n            if (trace.swaps[step].includes(idx)) barStyles += \" swapped\";\n            if (trace.sorted[step].includes(idx) || trace.sorted[step].includes(-1))\n              barStyles += \" sorted\";\n\n            return (\n              <div\n                className={barStyles}\n                key={idx}\n                style={{ height: val + \"px\", width: barWidth + \"px\" }}\n              ></div>\n            );\n          })\n        : array.map((val, idx) => {\n            return (\n              <div\n                className={\"bar\"}\n                key={idx}\n                style={{ height: val + \"px\", width: barWidth + \"px\" }}\n              ></div>\n            );\n          });\n\n    return <div className=\"array-container\">{arrayChart}</div>;\n  }\n}\n\nexport default Array;\n","const setTrace = (trace, array, comparison = [], swap = [], sorted) => {\n  trace.arrays.push(array.slice(0));\n  trace.comparisons.push(comparison);\n  trace.swaps.push(swap);\n\n  trace.sorted.length > 0\n    ? sorted === undefined\n      ? trace.sorted.push([...trace.sorted[trace.sorted.length - 1]])\n      : trace.sorted.push([...trace.sorted[trace.sorted.length - 1], sorted])\n    : trace.sorted.push([]);\n};\n\nconst swap = (array, i, j) => {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\nexport const quickSortAlgorythm = (array) => {\n  let trace = { arrays: [], comparisons: [], swaps: [], sorted: [] };\n\n  const partition = (array, low, high) => {\n    let i = low - 1;\n    let pivot = array[high];\n\n    // ANIMATIONS: set pivot bar\n    setTrace(trace, array, [i, high]);\n\n    for (let j = low; j < high; j++) {\n      setTrace(trace, array, [j, high]);\n      if (array[j] < pivot) {\n        i++;\n        // ANIMATIONS: swap\n        setTrace(trace, array, [high, high], [i, j]);\n        swap(array, i, j);\n        setTrace(trace, array, [high, high], [i, j]);\n      }\n    }\n    // ANIMATIONS: swap pivot and mark it as sorted\n    setTrace(trace, array, [], [i + 1, high]);\n    swap(array, i + 1, high);\n    setTrace(trace, array, [], [i + 1, high], i + 1);\n    return i + 1;\n  };\n\n  const quickSort = (array, low, high) => {\n    if (low >= high) {\n      if (low === high) {\n        setTrace(trace, array, [], [], low);\n      }\n      return;\n    }\n    let pi = partition(array, low, high);\n\n    quickSort(array, low, pi - 1);\n    quickSort(array, pi + 1, high);\n  };\n\n  quickSort(array, 0, array.length - 1);\n  setTrace(trace, array, [], [], -1);\n  return trace;\n};\n\nexport const mergeSort = (array) => {\n  let trace = { arrays: [], comparisons: [], swaps: [], sorted: [] };\n\n  function merge(array, startIdx, middleIdx, endIdx) {\n    const left = array.slice(startIdx, middleIdx);\n    const right = array.slice(middleIdx, endIdx);\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < left.length && j < right.length) {\n      setTrace(trace, array, [i + startIdx, j + middleIdx], [-1, -1]);\n      if (left[i] <= right[j]) {\n        array[k + startIdx] = left[i];\n        setTrace(trace, array, [], [k + startIdx, i + startIdx]);\n        i++;\n      } else {\n        array[k + startIdx] = right[j];\n        setTrace(trace, array, [], [k + startIdx, j + middleIdx]);\n        j++;\n      }\n      k++;\n    }\n    while (i < left.length) {\n      array[k + startIdx] = left[i];\n      setTrace(trace, array, [], [k + startIdx, i + startIdx]);\n      i++;\n      k++;\n    }\n    while (j < right.length) {\n      array[k + startIdx] = right[j];\n      setTrace(trace, array, [], [k + startIdx, j + middleIdx]);\n      j++;\n      k++;\n    }\n  }\n\n  function splitArray(array, startIdx, endIdx) {\n    const length = endIdx - startIdx;\n    if (length < 2) {\n      // if (length < 1) return array;\n      // else return [array[startIdx]];\n      return;\n    }\n\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    splitArray(array, startIdx, middleIdx);\n    splitArray(array, middleIdx, endIdx);\n    merge(array, startIdx, middleIdx, endIdx);\n  }\n\n  splitArray(array, 0, array.length);\n  setTrace(trace, array, [], [], -1);\n  return trace;\n};\n\nexport const bubbleSort = (arr) => {\n  let array = arr.slice(0);\n  let n = array.length;\n  let swapped = false;\n  let trace = { arrays: [], comparisons: [], swaps: [], sorted: [] };\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      setTrace(trace, array, [j, j + 1]);\n\n      if (array[j + 1] < array[j]) {\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        swapped = true;\n\n        setTrace(trace, array, [], [j, j + 1]);\n      }\n    }\n\n    setTrace(trace, array, [], [], n - i - 1);\n\n    if (!swapped) {\n      break;\n    }\n  }\n\n  return trace;\n};\n\nexport const insertionSort = (array) => {\n  let trace = { arrays: [], comparisons: [], swaps: [], sorted: [] };\n\n  for (let i = 1; i < array.length; i++) {\n    setTrace(trace, array, [i, i]);\n    let comparedValue = array[i];\n    let j = i - 1;\n\n    while (j >= 0 && comparedValue < array[j]) {\n      setTrace(trace, array, [], [i, j]);\n      array[j + 1] = array[j];\n      j--;\n    }\n    array[j + 1] = comparedValue;\n  }\n\n  setTrace(trace, array, [], [], -1);\n  return trace;\n};\n","import React from \"react\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Array from \"./components/Array/Array\";\nimport { mergeSort, bubbleSort, quickSortAlgorythm, insertionSort } from \"./Algorythms\";\n\nclass App extends React.Component {\n  state = {\n    array: [],\n    arraySize: 100,\n    algorythm: \"0\",\n    animationSpeed: 15,\n    visualizationRunning: false,\n    trace: { arrays: [], comparisons: [], swaps: [], sorted: [] },\n    step: 0,\n    animationId: null,\n\n    currentComparison: [],\n    currentSwap: [],\n  };\n\n  componentDidMount() {\n    this.generateNewArray();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.arraySize !== this.state.arraySize) {\n      this.generateNewArray();\n    }\n  }\n\n  generateNewArray() {\n    let { arraySize } = this.state;\n    const getRandomInt = (min, max) => {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    let array = [];\n    for (let i = 0; i < arraySize; i++) {\n      array.push(getRandomInt(5, 750));\n    }\n\n    this.setState({\n      array,\n      trace: {\n        arrays: [],\n        comparisons: [],\n        swaps: [],\n        sorted: [],\n      },\n      step: 0,\n    });\n  }\n\n  //Start generating new array and reset animations\n  handleArrayReset = () => {\n    this.generateNewArray();\n  };\n\n  //Generate new array of different size\n  handleSizeChange = (arraySize) => {\n    this.setState({ arraySize });\n  };\n\n  //Change animations speed\n  handleAnimationSpeedChange = (animationSpeed) => {\n    this.setState({ animationSpeed });\n  };\n\n  //Change current algorythm\n  handleAlgorythmChange = (algorythm) => {\n    if (this.state.trace.arrays.length !== 0) {\n      this.generateNewArray();\n    }\n    this.setState({ algorythm });\n  };\n\n  //Update array\n  handleArrayChange = (array) => {\n    this.setState({ array });\n  };\n\n  handleStart = () => {\n    let { algorythm, array, trace } = this.state;\n\n    switch (algorythm) {\n      case \"0\":\n        if (trace.arrays.length === 0) {\n          let newTrace = mergeSort(array);\n          this.setState({ trace: newTrace }, () => {\n            this.startVisualization();\n          });\n        } else {\n          this.startVisualization();\n        }\n        break;\n\n      case \"1\":\n        if (trace.arrays.length === 0) {\n          let newTrace = bubbleSort(array);\n          this.setState({ trace: newTrace }, () => {\n            this.startVisualization();\n          });\n        } else {\n          this.startVisualization();\n        }\n        break;\n\n      case \"2\":\n        if (trace.arrays.length === 0) {\n          let newTrace = quickSortAlgorythm(array);\n          this.setState({ trace: newTrace }, () => {\n            this.startVisualization();\n          });\n        } else {\n          this.startVisualization();\n        }\n        break;\n\n      case \"3\":\n        if (trace.arrays.length === 0) {\n          let newTrace = insertionSort(array);\n          this.setState({ trace: newTrace }, () => {\n            this.startVisualization();\n          });\n        } else {\n          this.startVisualization();\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  //Move to the next step of visualization\n  nextStep = () => {\n    let { step, trace } = this.state;\n    if (step < trace.arrays.length - 1) {\n      this.setState({ step: step + 1 });\n    } else {\n      this.stopVisualization();\n    }\n  };\n\n  startVisualization = () => {\n    let time = 250 / this.state.animationSpeed;\n    let animationId = setInterval(() => {\n      this.nextStep();\n    }, time);\n\n    this.setState({ animationId, visualizationRunning: true });\n  };\n\n  stopVisualization = () => {\n    clearInterval(this.state.animationId);\n    this.setState({ animationId: null, visualizationRunning: false });\n  };\n\n  render() {\n    const { arraySize, animationSpeed, array, trace, step, visualizationRunning } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Navbar\n          handleArrayReset={this.handleArrayReset}\n          handleSizeChange={this.handleSizeChange}\n          handleAnimationSpeedChange={this.handleAnimationSpeedChange}\n          handleAlgorythmChange={this.handleAlgorythmChange}\n          handleStart={this.handleStart}\n          stopVisualization={this.stopVisualization}\n          visualizationRunning={visualizationRunning}\n          arraySize={arraySize}\n          animationSpeed={animationSpeed}\n        />\n        <Array array={array} trace={trace} step={step} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}